grammar = _{ SOI ~ expr+ ~ EOI } 

expr = {
   (grouped_expr | compound_expr) ~ ((and_op | or_op) ~ (grouped_expr | compound_expr))*
}

grouped_expr = _{ "(" ~ expr ~  ")" }

compound_expr = _{ simple_expr | contains_expr }

contains_expr = { type_expr ~ in_op ~ list_expr }       // e.g. date(1) in [1970-07-31, now()] 

simple_expr = { type_expr ~ op ~ value }                // e.g. date(1) > 1970-07-31, internal check for compatibility needed...

type_expr = { type_term ~ "(" ~ type_term_arg ~ ")" }   // e.g. date(1) or date(*)

type_term = { 
    "date" | "time"| "timestamp" | "boolean" | "ipv4" 
  | "ipv6" | "semver" | "email" | "loglevel" | "number" 
  | "integer" | "float" | "string" | "semver"
}  

type_term_arg = { ASCII_DIGIT+ | "*" }

list_expr = { "[" ~ list_member_expr ~ "]" }   // e.g. [value, ...]

list_member_expr = { value ~ ("," ~ value)* }

WHITESPACE = _{ " " }

and_op = { "&&" }

or_op = { "||" }

op = { gt | lt | gte | lte | eq | neq | match_op }

gt = { ">" }
lt = { "<" }
gte = { ">=" }
lte = { "<=" } 
eq = { "==" }
neq = { "!=" }
match_op = { "match" }
in_op = { "in" }

value = { string } 

string = _{ char* }

char = _{ ASCII_ALPHANUMERIC | "." | "_" | "-" | "+" | "/" | "@" | "\\" | "{" | "}" | "^" | "$" |  "()" | ":" }
